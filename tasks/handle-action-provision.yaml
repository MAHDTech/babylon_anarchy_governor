---
- name: Call Ansible Tower job-runner to provision {{ anarchy_subject_name }}
  vars:
    action_job_vars:
      ACTION: provision
      __meta__:
        callback:
          token: "{{ anarchy_action_callback_token }}"
          url: "{{ anarchy_action_callback_url }}"
        deployer:
          entry_point: ansible/main.yml
          timeout: 0
        tower:
          action: provision
  uri:
    url: https://{{ babylon_tower.hostname }}/api/v2/job_templates/job-runner/launch/
    url_username: "{{ babylon_tower.user }}"
    url_password: "{{ babylon_tower.password }}"
    force_basic_auth: true
    validate_certs: false
    method: POST
    return_content: true
    status_code: 201
    body_format: json
    body:
      extra_vars:
        job_vars: >-
          {{ vars.anarchy_subject.vars.job_vars | default({})
           | combine(vars.anarchy_governor.vars.job_vars, recursive=True)
           | combine(action_job_vars, recursive=True)
          }}
  register: r_api_response
  # FIXME - Handle API errors
  #ignore_errors: true

- name: Update AnarchySubject {{ anarchy_subject_name }} for launch job
  anarchy_subject_update:
    spec:
      # Save job vars to dynamic_job_vars which otherwise may break start/stop/destroy if changed.
      # For example, aws region.
      vars:
        dynamic_job_vars: "{{ vars.anarchy_governor | filter_job_vars_to_dynamic_job_vars(preserve_job_vars) }}"
      varSecrets: "{{ vars.anarchy_governor | filter_job_vars_secrets_to_dynamic_job_vars }}"
    status:
      towerJobs:
        provision:
          launchJob: '{{ r_api_response.json.job | default(None) }}'
          launchTimestamp: '{{ anarchy_run_timestamp }}'

- name: Schedule check for {{ anarchy_subject_name }}
  anarchy_schedule_action:
    action: check
    after: "{{ provision_check_interval }}"

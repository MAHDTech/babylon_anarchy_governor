---
- when: >-
    'completeTimestamp' not in vars.anarchy_subject.status.towerJobs.provision
  block:
  - name: >-
      {% if 'deployerJob' in vars.anarchy_subject.status.towerJobs.provision %}
      Get provision deployer job for {{ anarchy_subject_name }}
      {% else %}
      Get provision launch job for {{ anarchy_subject_name }}
      {% endif %}
    vars:
      # Check the deployer job if present, otherwise check launch job
      _provision_tower_jobs: >-
        {{ vars.anarchy_subject.status.towerJobs.provision | default({}) }}
      _job_id: >-
        {{ _provision_tower_jobs.deployerJob
         | default(_provision_tower_jobs.launchJob)
         | default('')
        }}
    uri:
      url: https://{{ babylon_tower.hostname }}/api/v2/jobs/{{ _job_id }}/
      url_username: "{{ babylon_tower.user }}"
      url_password: "{{ babylon_tower.password }}"
      force_basic_auth: true
      # FIXME - Should validate certs
      validate_certs: false
      return_content: true
    register: r_api_response
    # FIXME - Handle API errors
    #ignore_errors: true

  - name: Handle failure tower job failed or cancled
    vars:
      _job_status: "{{ r_api_response.json.status }}"
    when:
    - _job_status in ['canceled', 'failed']
    - vars.anarchy_subject.spec.vars.current_state | default('') != 'destroying'
    block:

    - when:
      - poolboy_resource_handle_name != ''
      - poolboy_resource_handle_namespace != ''
      name: Set unhealthy in resource handle {{ poolboy_resource_handle_name }}
      # FIXME - switch to k8s_json_patch module?
      command: >-
        oc patch resourcehandles.poolboy.gpte.redhat.com --type=json
        -n {{ poolboy_resource_handle_namespace | quote }}
        {{ poolboy_resource_handle_name | quote }}
        --patch={{ json_patch | to_json | quote }}
      vars:
        json_patch:
        - op: add
          path: /spec/resources/{{ poolboy_resource_index }}/template/spec/vars/healthy
          value: false
      # This is best-effort, don't fail on task failure
      ignore_errors: true

    - name: Set failure state for {{ anarchy_subject_name }}
      when:
      - _job_status in ['canceled', 'failed']
      - vars.anarchy_subject.spec.vars.current_state | default('') != 'destroying'
      anarchy_subject_update:
        skip_update_processing: true
        metadata:
          labels:
            state: "provision-{{ _job_status }}"
        spec:
          vars:
            current_state: "provision-{{ _job_status }}"
            healthy: false
        status:
          towerJobs:
            provision:
              completeTimestamp: "{{ anarchy_run_timestamp }}"

  # FIXME - How to handle successful deployment where we did not get the
  #         completion callback?

  - name: Schedule next check for {{ anarchy_subject_name }}
    vars:
      _job_status: "{{ r_api_response.json.status }}"
    when: _job_status not in ['canceled', 'failed', 'successful']
    anarchy_schedule_action:
      action: check
      after: "{{ provision_check_interval }}"
